#!/bin/bash
# exit if any command fails
set -e

verbose=${KR_VERBOSE:-true}
if [ "$verbose" != "false" ]; then
  set -x
  export
fi

# App variables
pull_request_number=$KR_PULL_REQUEST_NUMBER
branch_name=$KR_BRANCH_NAME
repo_name=$KR_REPO_NAME
repo_owner=$KR_REPO_OWNER
job_url=$KR_JOB_URL

# Kube Review variables
prefix=${KR_PREFIX:-re}
kube_config_file=${KR_KUBE_CONFIG_FILE:-$HOME/.kube/config}
name="$prefix-${KR_ID_OVERRIDE:-$KR_ID}"
short_name=$(echo "$name" | cut -c1-15 | awk '{print tolower($0)}')
hash=$(echo "$name" | rhash -p "%c" -)
namespace=$short_name-$hash
is_ephemeral=${KR_IS_EPHEMERAL:-true}
kube_context=$KR_KUBE_CONTEXT
overlay_path=$KR_OVERLAY_PATH
base_overlay_path=${KR_BASE_OVERLAY_PATH:-"src/build/resources/base"}

updated_at=$(date +%s)

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  scoped_kubeconfig_file=$kube_config_file-$namespace
  cp "$kube_config_file" "$scoped_kubeconfig_file"
  export KUBECONFIG=${scoped_kubeconfig_file}

  if [ "$kube_context" != "" ]; then
    kubectl config use-context "$kube_context"
  fi
}

build_resources () {
  # Prepare directory structure and copy files
  work_dir=$(mktemp -d)

  # If we don't have a overlay to apply, we just run from base overlay
  cp -R "$base_overlay_path" "$work_dir"
  if [ "$overlay_path" != "" ]; then
    cp -R "$overlay_path" "$work_dir/overlay"
  fi

  # Apply variable substituion on patches
  for f in "$work_dir"/**/patches/*.json
  do
    KR_NAMESPACE=$namespace \
    envsubst < "$f" | sponge "$f";
    if [ "$verbose" = "true" ]; then
      cat "$f"
    fi
	done

  cd "$work_dir/base"
  if [ "$overlay_path" != "" ]; then
    cd "$work_dir/overlay"
  fi

  kustomize edit set namespace "$namespace"
  kustomize edit add annotation --force \
  app.kubernetes.io/instance:"$namespace" \
  app.kubernetes.io/pull_request_number:"$pull_request_number" \
  app.kubernetes.io/branch_name:"$branch_name" \
  app.kubernetes.io/repository_name:"$repo_name" \
  app.kubernetes.io/repository_owner:"$repo_owner" \
  app.kubernetes.io/updated_at:"$updated_at" \
  app.kubernetes.io/is_ephemeral:"$is_ephemeral" \
  app.kubernetes.io/job_url:'"'$job_url'"'
  if [ "$verbose" = "true" ]; then
    kustomize build
  fi

  resources=$(kustomize build)
  kubectl create secret "kube-review-build/$namespace" \
    --save-config \
    --dry-run=client \
    --from-literal=resources="$resources" \
    -o yaml | \
    kubectl apply -f -
}

export_variables
config_context
build_resources
