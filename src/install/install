#!/bin/bash
# exit if any command fails
set -e

verbose=${KR_VERBOSE:-true}
if [ "$verbose" != "false" ]; then
  set -x
  export
fi

# Kube Review variables
prefix=${KR_PREFIX:-re}
kube_config_file=${KR_KUBE_CONFIG_FILE:-$HOME/.kube/config}
name="$prefix-${KR_ID_OVERRIDE:-$KR_ID}"
orignal_name="$prefix-$KR_ID"
short_name=$(echo "$name" | cut -c1-15 | awk '{print tolower($0)}')
short_name_original=$(echo "$orignal_name" | cut -c1-15 | awk '{print tolower($0)}')
hash=$(echo "$name" | rhash -p "%c" -)
hash_original=$(echo "$orignal_name" | rhash -p "%c" -)
namespace=$short_name-$hash
namespace_original=$short_name_original-$hash_original
is_ephemeral=${KR_IS_EPHEMERAL:-true}
host=$namespace.$KR_DOMAIN
url=https://$host
kube_context=$KR_KUBE_CONTEXT
test_connection=${KR_TEST_CONNECTION:-true}
test_connection_url_path=${KR_TEST_CONNECTION_URL_PATH:-"/"}
delete_before_apply=${KR_DELETE_BEFORE_APPLY:-false}

updated_at=$(date +%s)

export_variables() {
  # Export normally here so they are available to the post hook
  export URL=$url
}

print_preinstall_message() {
  echo "Environment will be deployed with url: $url"

  if [ "$KR_MESSAGE" != "" ]; then
    printf "%s\n" "$KR_MESSAGE" "$KR_LOG_URL$namespace"
  fi
}

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  scoped_kubeconfig_file=$kube_config_file-$namespace
  cp "$kube_config_file" "$scoped_kubeconfig_file"
  export KUBECONFIG=${scoped_kubeconfig_file}

  if [ "$kube_context" != "" ]; then
    kubectl config use-context "$kube_context"
  fi
}

install_resources () {
  work_dir=$(mktemp -d)
  cd "$work_dir"
  
  # Get orverlay resources and untar into a folder
  kubectl get secrets -n kube-review-build "$namespace_original" -o jsonpath='{.data.resources}' | base64 -d > overlay.tar
  tar -xf overlay.tar

  # Get the overlay target and enter the directory
  target=$(kubectl get secrets -n kube-review-build "$namespace_original" -o jsonpath='{.data.overlay_target}' | base64 -d)
  cd "$target"

  # Apply variable substituion on patches
  for f in "$work_dir"/**/patches/*.json
  do
    KR_NAMESPACE=$namespace \
    envsubst < "$f" | sponge "$f";
    if [ "$verbose" = "true" ]; then
      cat "$f"
    fi
	done

  kustomize edit set namespace "$namespace"
  kustomize edit add annotation --force \
  app.kubernetes.io/instance:"$namespace" \
  app.kubernetes.io/updated_at:"$updated_at" \
  app.kubernetes.io/is_ephemeral:"$is_ephemeral" \
  app.kubernetes.io/job_url:'"'$job_url'"'
  if [ "$verbose" = "true" ]; then
    kustomize build
  fi


  if [ "$delete_before_apply" != false ]; then
    kubectl delete namespace "$namespace" --wait=true --ignore-not-found=true
  fi

  fresh_install=0
  output=$(kubectl get deployment -n "$namespace" kube-review-deployment --ignore-not-found)
  if [[ $output = "" ]]; then \
    echo "First time deployment, rollout is not necessary"; \
    fresh_install=1; \
  fi

  # Apply changes generated by kustomize
  kustomize build | kubectl apply -f - -n "$namespace" --wait=true

  if [[ $fresh_install != 1 ]]; then
    # Rollout is necessary to force loading of secrets when only the secrets is updated
    echo "Re-deployment, executing rollout";
    kubectl rollout restart -n "$namespace" deployment/kube-review-deployment    
  fi

  if kubectl rollout status --timeout=5m -n "$namespace" deployment/kube-review-deployment; then
    echo "Rollout successfully executed"
  else
    echo "Rollout was not Successful... Describing Deployed Pods"
    kubectl -n "$namespace" describe pods
    echo "Showing Namespace Events"
    kubectl -n "$namespace" get events

    if [ "$verbose" = "false" ]; then
      exit 1;
    else
      echo "[VERBOSE] Showing Pods Logs"
      for pod_names in $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n "$namespace" --field-selector status.phase=Running)
      do
        echo "Logs from Pod '"$pod_names"'" "in" the Namespace "'"$namespace"':"
        kubectl -n "$namespace" logs "$pod_names" --all-containers=true
      done
      exit 1;
    fi
  fi
}

test_url() {
  if [ "$test_connection" = true ];
  then
    full_url=$url$test_connection_url_path
    echo "Running connection test against: $full_url"
    output=$(curl --silent --fail --retry 3 "$full_url")
    if [[ $? != 0 ]]; then
      echo "Connection test has failed with the following test output: $output";
      exit 1;
    else
      echo "Connection test executed successfully";
    fi
  else
    echo "Connection test is disabled";
  fi
}

export_variables
print_preinstall_message
config_context
install_resources
test_url
