#!/bin/bash
# exit if any command fails
set -e

verbose=${KR_VERBOSE:-false}
if [ "$verbose" != "false" ]; then
  set -x
  export
fi
# Kube Review variables
prefix=${KR_PREFIX:-re}
kube_config_file=${KR_KUBE_CONFIG_FILE:-$HOME/.kube/config}
name="$prefix-${KR_ID_OVERRIDE:-$KR_ID}"
short_name=$(echo "$name" | cut -c1-15 | awk '{print tolower($0)}')
hash=$(echo "$name" | rhash -p "%c" -)
namespace=$short_name-$hash
host=$namespace.$KR_DOMAIN
url=https://$host
kube_context=$KR_KUBE_CONTEXT
test_connection=${KR_TEST_CONNECTION:-true}
test_connection_url_path=${KR_TEST_CONNECTION_URL_PATH:-"/"}

export_variables() {
  # Export normally here so they are available to the post hook
  export URL=$url
}

print_preinstall_message() {
  echo "Environment will be deployed with url: $url"

  if [ "$KR_MESSAGE" != "" ]; then
    printf "%s\n" "$KR_MESSAGE" "$KR_LOG_URL$namespace"
  fi
}

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  scoped_kubeconfig_file=$kube_config_file-$namespace
  cp "$kube_config_file" "$scoped_kubeconfig_file"
  export KUBECONFIG=${scoped_kubeconfig_file}

  if [ "$kube_context" != "" ]; then
    kubectl config use-context "$kube_context"
  fi
}

restart() {
  # Rollout is necessary to force loading of secrets when only the secrets is updated
  echo "Re-deployment, executing rollout";
  kubectl rollout restart -n "$namespace" deployment/kube-review-deployment    
  kubectl rollout status --timeout=5m -n "$namespace" deployment/kube-review-deployment

  if [ $? -ne 0 ]; then
    echo "Rollout was not Successful... Describing Deployed Pods"
    kubectl -n "$namespace" describe pods
    echo "Showing Namespace Events"
    kubectl -n "$namespace" get events

    if [ "$verbose" = "true" ]; then
      echo "[VERBOSE] Showing Pods Logs"
      for pod_names in $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n "$namespace" --field-selector status.phase=Running)
      do
        echo "Logs from Pod '"$pod_names"'" "in" the Namespace "'"$namespace"':"
        kubectl -n "$namespace" logs "$pod_names" --all-containers=true
        echo
      done
    fi
  fi
}

test_url() {
  if [ "$test_connection" = true ];
  then
    full_url=$url$test_connection_url_path
    echo "Running connection test against: $full_url"
    output=$(curl --silent --fail --retry 3 "$full_url")
    if [[ $? != 0 ]]; then
      echo "Connection test has failed with the following test output: $output";
      exit 1;
    else
      echo "Connection test executed successfully";
    fi
  else
    echo "Connection test is disabled";
  fi
}

export_variables
print_preinstall_message
config_context
restart
test_url

if [ "$KR_POST_HOOK" != "" ]; then
  echo "Running post hook command: $KR_POST_HOOK"
  eval "$KR_POST_HOOK"
fi
